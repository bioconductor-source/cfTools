// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// read_deconvolution_cpp
void read_deconvolution_cpp(std::string reads_binning_file, int num_tissues, double min_likelihood_ratio_cutoff, std::string tissue_markers_file, std::string em_algorithm_type, std::string output_file, std::string output_type, int em_max_iterations, int random_seed);
RcppExport SEXP _cfTools_read_deconvolution_cpp(SEXP reads_binning_fileSEXP, SEXP num_tissuesSEXP, SEXP min_likelihood_ratio_cutoffSEXP, SEXP tissue_markers_fileSEXP, SEXP em_algorithm_typeSEXP, SEXP output_fileSEXP, SEXP output_typeSEXP, SEXP em_max_iterationsSEXP, SEXP random_seedSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type reads_binning_file(reads_binning_fileSEXP);
    Rcpp::traits::input_parameter< int >::type num_tissues(num_tissuesSEXP);
    Rcpp::traits::input_parameter< double >::type min_likelihood_ratio_cutoff(min_likelihood_ratio_cutoffSEXP);
    Rcpp::traits::input_parameter< std::string >::type tissue_markers_file(tissue_markers_fileSEXP);
    Rcpp::traits::input_parameter< std::string >::type em_algorithm_type(em_algorithm_typeSEXP);
    Rcpp::traits::input_parameter< std::string >::type output_file(output_fileSEXP);
    Rcpp::traits::input_parameter< std::string >::type output_type(output_typeSEXP);
    Rcpp::traits::input_parameter< int >::type em_max_iterations(em_max_iterationsSEXP);
    Rcpp::traits::input_parameter< int >::type random_seed(random_seedSEXP);
    read_deconvolution_cpp(reads_binning_file, num_tissues, min_likelihood_ratio_cutoff, tissue_markers_file, em_algorithm_type, output_file, output_type, em_max_iterations, random_seed);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_cfTools_read_deconvolution_cpp", (DL_FUNC) &_cfTools_read_deconvolution_cpp, 9},
    {NULL, NULL, 0}
};

RcppExport void R_init_cfTools(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
